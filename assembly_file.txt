;   Code to find the natural number upto a given number using recursion
;   start:
;        addi x3, x0, 100      ; x3 = 4
;        addi x4, x0, 0      ; x4 = 0
;        addi x2, x2, 3071   ; x2 = 3071, initializing stack pointer
;        sw x3, 2048(x0)     ; Mem[2048] <- x3
;        jal natural_sum     ; call subroutine natural_sum
;        sw x4, 2049(x0)     ; Mem[2049] <- x4
;    halt

;    natural_sum:
;        bne x3, x0, exec    ; if(x3 != 0) then goto exec
;        jr                  ; else return
;        exec:               
;        sw x1, 0(x2)        ; push return address
;        addi x2, x2, -1     
;        add x4, x4, x3, 0   ; x4 <- x4 + x3
;        addi x3, x3, -1     ; x3 <- x3 - 1
;        jal natural_sum     ; recursion
;        addi x2, x2, 1      ; pop return address
;        lw x1, 0(x2)
;    jr

;   Code to sort an array of numbers in ascending order
;   first address contains size of array, the remaining are the elements

start:
    addi x3, x3, 2048       ; pointing x3 to the first address
    lw x4, #0(x3)           ; x4 <- array size
    slte x5, x4, x0         ; x5 = 1 if x4 <= 0, else x5 = 0
    bne x5, x0, exit        ; exit if x5 == 1
    addi x4, x4, -1         ; x4 <- x4 - 1
    addi x3, x3, 1          ; pointing x3 to the address marking start of elements

    loop_outer:
        beq x4, x0, exit    ; if x4 == 0 then stop execution
        add x6, x0, x3, 0   ; x6 <- x3
        add x10, x0, x4, 0  ; x10 <- x4
        loop_inner:
            jal compare_and_swap
            addi x10, x10, -1   ; x10 <- x10 - 1
            addi x6, x6, 1      ; x6 <- x6 + 1
            bne x10, x0, loop_inner     ; if x10 != 0 then continue inner loop
        addi x4, x4, -1     ; x4 <- x4 - 1
        jump loop_outer
exit:
    halt

compare_and_swap:
    lw x7, 0(x6)            ; x7 <- Mem[x6]
    lw x8, 1(x6)            ; x8 <- Mem[x6 + 1]
    sgt x9, x7, x8          ; x9 <- 1 if x7 > x8, else x9 <- 0
    beq x9, x0, return      ; if x9 == 0 then return
    sw x7, 1(x6)            ; else swap elements
    sw x8, 0(x6)
return:
    jr
